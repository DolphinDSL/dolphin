@startuml

class Mission {

    - commands: LinkedList<DroneCommand>

    + List<MAVLinkMessage> toMavLinkMessages(MAVLinkNode)

    + TaskExecutor getExecutor()

}

abstract class PlatformTask {
    + abstract TaskExecutor getExecutor()
}

interface Task {
    + TaskExecutor getExecutor()
}

abstract class TaskExecutor {

    + void start()
    + void step()
    + void stop()

}

class MissionExecutor {

    MAVLinkNode executing

}

abstract class DroneCommand {

 + abstract MAVLinkMessage toMavLinkMessage(MAVLinkNode)

}

abstract class MissionPoint {

 + MAVLinkMessage toMavLinkMessage(MAVLinkNode)

 + MAVLinkMessage toMavLinkMessage(MAVLinkNode, int)

}

class MAVLinkNode {
    #MissionExecutor currentMission

    #MissionUploadProtocol uploadProtocol

    #void send(MAVLinkMessage)
}

class MissionUploadProtocol {

    + void start(Mission)

}

Mission "Extends" --|> PlatformTask

PlatformTask "Implements" --|> Task

Mission::commands --|> DroneCommand

Mission::toMavLinkMessages --|> "Generates" MAVLinkMessage

PlatformTask::getExecutor "Returns" --|> TaskExecutor

Mission::getExecutor "Returns" --|> MissionExecutor

MissionPoint::toMavLinkMessage "calls" --* MissionPoint::toMavLinkMessage

DroneCommand <|-- "Extends" MissionPoint

MissionExecutor "Extends" --|> TaskExecutor

MAVLinkNode::currentMission "Contains" --|> MissionExecutor

MAVLinkNode::uploadProtocol --|> MissionUploadProtocol

Mission "Takes" <|-- MissionUploadProtocol::start

MissionExecutor "Sends a Mission to Drone" <|-- MissionUploadProtocol::start

MAVLinkNode::send  "Sends to Drone" --|> MAVLinkMessage

@enduml