@startuml

interface Task {

    +{abstract} String getId()
    +{abstract} TaskExecutor getExecutor()
    +{abstract} boolean allocate(NodeSet, Map<Task, <List<Node>>)

}

abstract class PlatformTask implements Task {

    - String id

    + String getId()

    +{abstract} List<NodeFilter> getRequirements()

}

abstract class TaskExecutor {

    - Task task
    - State state
    - double startTime
    - double timeElapsed
    - CompletionState state

    + void start()
    + void step()
    + void stop()
    ~ {abstract} void onInitialize(Map<Task, List<Node>>)
    ~ {abstract} void onStart()
    ~ {abstract} CompletionState onStep()
    ~ {abstract} void onCompletion()

}

abstract class PlatformTaskExecutor extends TaskExecutor {

    - List<Node> nodes

    ~ List<Node> getVehicles()
    ~ Node getVehicle()
    ~ void onInitialize(Map<Task, List<Node>>)

}

interface Node {

    #{abstract}String getId()
    #{abstract}String getType()
    #{abstract}Position getPosition()
    #{abstract}Payload getPayload()
    #{abstract}void release()
    #{abstract}Task getRunningTask()
    #{abstract}void setRunningTask(Task)
    #{abstract}double getConnectionTimeout()
    #{abstract}void setConnectionTimeout(double)

}

abstract class AbstractNode implements Node {

    - String nodeId
    - Task runningTask
    - double connectionTimeout

    +String getId()
    +Task getRunningTask()
    +void setRunningTask(Task)
    +double getConnectionTimeOut()
    +void setConnectionTimeout(double)

    +{abstract} double batteryRemaining()
    +{abstract} String getType()
    +{abstract} Position getPosition()
    +{abstract} Payload getPayload()
    +{abstract} void release()

}

Node::getRunningTask "Runs" --> Task

Task::getExecutor "Creates" --> TaskExecutor

class MAVLinkNode extends AbstractNode {

    - SocketAddress sockAddr
    - MissionUploadProtocol uploadProtocol
    - MissionDownloadProtocol downloadProtocol
    - MissionExecutor currentExecutor

    + int getMAVLinkId()
    + String getType()
    + Position getPosition()
    + Payload getPayload()
    + SocketAddress getAddress()
    + MissionUploadProtocol getUploadProtocol()
    + MissionDownloadProtocol getDownloadProtocol()

    + void release()
    + void send(MAVLinkMessage)
    + boolean available()
    + msg_heartbeat getLastHBReceived()
    + msg_sys_status getLastSystemStatus()
    + double batteryRemaining()

    + void setExecutor(MissionExecutor)

    # void consume(msg_global_position)
    # void consume(msg_heartbeat)
    # void consume(msg_sys_status)

}

class Mission extends PlatformTask {

   - LinkedList<DroneCommand> missionCommand

   + List<DroneCommand> getCommandList()
   + void setDroneCommands(List<DroneCommand>)
   + int missionPoints()
   + List<MAVLinkMessage> toMissionMessages(MAVLinkNode)
   + Map<Integer, List<MAVLinkMessage>> droneCommandsToMissionItem(MAVLinkNode)
   + List<NodeFilter> getRequirements()
   + TaskExecutor getExecutor()

}

class MissionExecutor extends PlatformTaskExecutor {
    - List<MAVLinkMessage> messages
    - Map<Integer, List<MAVLinkMessage>> droneCommands
    - int currentMissionIndex

    + List<MAVLinkMessage> getBaseMessages()
    + Map<Integer, List<MAVLinkMessage>> getBaseDroneCommands()

    # void onStart()
    # void onStep()
    # void onCompletion()

    # void consume(msg_mission_item_reached)
    # void consume(msg_mission_current)
    # void consume(msg_mission_ack)
}

@enduml